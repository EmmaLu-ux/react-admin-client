{"ast":null,"code":"import\"antd/es/input/style\";import _Input from\"antd/es/input\";import _classCallCheck from\"/Users/emmalu/Documents/fronted/workspace/react-admin_client-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/emmalu/Documents/fronted/workspace/react-admin_client-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/emmalu/Documents/fronted/workspace/react-admin_client-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/emmalu/Documents/fronted/workspace/react-admin_client-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import\"antd/es/tree/style\";import _Tree from\"antd/es/tree\";import\"antd/es/form/style\";import _Form from\"antd/es/form\";import React,{PureComponent}from\"react\";import menuList from\"../../config/menuConfig\";var Item=_Form.Item;var TreeNode=_Tree.TreeNode;/* 添加分类的form组件 */var AuthForm=/*#__PURE__*/function(_PureComponent){_inherits(AuthForm,_PureComponent);var _super=_createSuper(AuthForm);/* 根据传入角色的menu生成初始状态 */function AuthForm(props){var _this;_classCallCheck(this,AuthForm);_this=_super.call(this,props);_this.onCheck=function(checkedKeys){console.log(\"onCheck\",checkedKeys);_this.setState({checkedKeys:checkedKeys});};_this.getTreeNodes=function(menuList){return menuList.reduce(function(pre,item){pre.push(/*#__PURE__*/React.createElement(TreeNode,{title:item.title,key:item.key},item.children?_this.getTreeNodes(item.children):null));return pre;},[]);};_this.getMenus=function(){return _this.state.checkedKeys;};var menus=_this.props.role.menus;_this.state={checkedKeys:menus};return _this;}/* 选中某个node时的回调 */_createClass(AuthForm,[{key:\"componentWillMount\",value:function componentWillMount(){this.treeNodes=this.getTreeNodes(menuList);}/* 根据新传入的role来更新checkedKeys状态\n  当组件接收到新的属性时自动调用 */},{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(nextProps){console.log(\"componentWillReceiveProps()\",nextProps);var menus=nextProps.role.menus;this.setState({checkedKeys:menus});// this.state.checkedKeys = menus\n}},{key:\"render\",value:function render(){console.log(\"AuthForm render()\");var role=this.props.role;var checkedKeys=this.state.checkedKeys;// const { getFieldDecorator } = this.props.form;\nvar formItemLayout={labelCol:{span:5},wrapperCol:{span:16}};return/*#__PURE__*/React.createElement(_Form,null,/*#__PURE__*/React.createElement(Item,Object.assign({label:\"\\u89D2\\u8272\\u540D\\u79F0\"},formItemLayout),/*#__PURE__*/React.createElement(_Input,{value:role.name,disabled:true})),/*#__PURE__*/React.createElement(_Tree,{onCheck:this.onCheck,checkable:true,defaultExpandAll:true,checkedKeys:checkedKeys},/*#__PURE__*/React.createElement(TreeNode,{title:\"\\u5E73\\u53F0\\u6743\\u9650\",key:\"all\"},this.treeNodes)));}}]);return AuthForm;}(PureComponent);export{AuthForm as default};","map":{"version":3,"names":["React","PureComponent","menuList","Item","TreeNode","AuthForm","props","onCheck","checkedKeys","console","log","setState","getTreeNodes","reduce","pre","item","push","title","key","children","getMenus","state","menus","role","treeNodes","nextProps","formItemLayout","labelCol","span","wrapperCol","name"],"sources":["/Users/emmalu/Documents/fronted/workspace/react-admin_client-1/src/pages/role/auth-form.jsx"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport { Form, Input, Tree } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport menuList from \"../../config/menuConfig\";\n\nconst Item = Form.Item;\nconst { TreeNode } = Tree;\n\n/* 添加分类的form组件 */\nexport default class AuthForm extends PureComponent {\n  static propTypes = {\n    role: PropTypes.object,\n  };\n  /* 根据传入角色的menu生成初始状态 */\n  constructor(props) {\n    super(props);\n    const { menus } = this.props.role;\n    this.state = {\n      checkedKeys: menus,\n    };\n  }\n  /* 选中某个node时的回调 */\n  onCheck = (checkedKeys) => {\n    console.log(\"onCheck\", checkedKeys);\n    this.setState({ checkedKeys });\n  };\n  getTreeNodes = (menuList) => {\n    return menuList.reduce((pre, item) => {\n      pre.push(\n        <TreeNode title={item.title} key={item.key}>\n          {item.children ? this.getTreeNodes(item.children) : null}\n        </TreeNode>\n      );\n      return pre;\n    }, []);\n  };\n  /* 为父组件提供获取最新menus数据的方法 */\n  getMenus = () => this.state.checkedKeys;\n  componentWillMount() {\n    this.treeNodes = this.getTreeNodes(menuList);\n  }\n  /* 根据新传入的role来更新checkedKeys状态\n  当组件接收到新的属性时自动调用 */\n  componentWillReceiveProps(nextProps) {\n    console.log(\"componentWillReceiveProps()\", nextProps);\n    const menus = nextProps.role.menus;\n    this.setState({\n      checkedKeys: menus,\n    });\n    // this.state.checkedKeys = menus\n  }\n  render() {\n    console.log(\"AuthForm render()\");\n    const { role } = this.props;\n    const { checkedKeys } = this.state;\n    // const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: { span: 5 },\n      wrapperCol: { span: 16 },\n    };\n    return (\n      <Form>\n        <Item label=\"角色名称\" {...formItemLayout}>\n          <Input value={role.name} disabled />\n        </Item>\n        <Tree\n          onCheck={this.onCheck}\n          checkable\n          defaultExpandAll={true}\n          checkedKeys={checkedKeys}\n        >\n          <TreeNode title=\"平台权限\" key=\"all\">\n            {this.treeNodes}\n          </TreeNode>\n        </Tree>\n      </Form>\n    );\n  }\n}\n"],"mappings":"w3BAAA,MAAOA,MAAK,EAAIC,aAAa,KAAQ,OAAO,CAG5C,MAAOC,SAAQ,KAAM,yBAAyB,CAE9C,GAAMC,KAAI,CAAG,MAAKA,IAAI,CACtB,GAAQC,SAAQ,OAARA,QAAQ,CAEhB,oBACqBC,SAAQ,4GAI3B,uBACA,kBAAYC,KAAK,CAAE,0CACjB,uBAAMA,KAAK,EAAE,MAOfC,OAAO,CAAG,SAACC,WAAW,CAAK,CACzBC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEF,WAAW,CAAC,CACnC,MAAKG,QAAQ,CAAC,CAAEH,WAAW,CAAXA,WAAY,CAAC,CAAC,CAChC,CAAC,OACDI,YAAY,CAAG,SAACV,QAAQ,CAAK,CAC3B,MAAOA,SAAQ,CAACW,MAAM,CAAC,SAACC,GAAG,CAAEC,IAAI,CAAK,CACpCD,GAAG,CAACE,IAAI,cACN,oBAAC,QAAQ,EAAC,KAAK,CAAED,IAAI,CAACE,KAAM,CAAC,GAAG,CAAEF,IAAI,CAACG,GAAI,EACxCH,IAAI,CAACI,QAAQ,CAAG,MAAKP,YAAY,CAACG,IAAI,CAACI,QAAQ,CAAC,CAAG,IAAI,CAC/C,CACZ,CACD,MAAOL,IAAG,CACZ,CAAC,CAAE,EAAE,CAAC,CACR,CAAC,OAEDM,QAAQ,CAAG,iBAAM,OAAKC,KAAK,CAACb,WAAW,GArBrC,GAAQc,MAAK,CAAK,MAAKhB,KAAK,CAACiB,IAAI,CAAzBD,KAAK,CACb,MAAKD,KAAK,CAAG,CACXb,WAAW,CAAEc,KACf,CAAC,CAAC,aACJ,CACA,yEAiBA,6BAAqB,CACnB,IAAI,CAACE,SAAS,CAAG,IAAI,CAACZ,YAAY,CAACV,QAAQ,CAAC,CAC9C,CACA;AACF,oBADE,yCAEA,mCAA0BuB,SAAS,CAAE,CACnChB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAEe,SAAS,CAAC,CACrD,GAAMH,MAAK,CAAGG,SAAS,CAACF,IAAI,CAACD,KAAK,CAClC,IAAI,CAACX,QAAQ,CAAC,CACZH,WAAW,CAAEc,KACf,CAAC,CAAC,CACF;AACF,CAAC,sBACD,iBAAS,CACPb,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAChC,GAAQa,KAAI,CAAK,IAAI,CAACjB,KAAK,CAAnBiB,IAAI,CACZ,GAAQf,YAAW,CAAK,IAAI,CAACa,KAAK,CAA1Bb,WAAW,CACnB;AACA,GAAMkB,eAAc,CAAG,CACrBC,QAAQ,CAAE,CAAEC,IAAI,CAAE,CAAE,CAAC,CACrBC,UAAU,CAAE,CAAED,IAAI,CAAE,EAAG,CACzB,CAAC,CACD,mBACE,4CACE,oBAAC,IAAI,gBAAC,KAAK,CAAC,0BAAM,EAAKF,cAAc,eACnC,4BAAO,KAAK,CAAEH,IAAI,CAACO,IAAK,CAAC,QAAQ,OAAG,CAC/B,cACP,2BACE,OAAO,CAAE,IAAI,CAACvB,OAAQ,CACtB,SAAS,MACT,gBAAgB,CAAE,IAAK,CACvB,WAAW,CAAEC,WAAY,eAEzB,oBAAC,QAAQ,EAAC,KAAK,CAAC,0BAAM,CAAC,GAAG,CAAC,KAAK,EAC7B,IAAI,CAACgB,SAAS,CACN,CACN,CACF,CAEX,CAAC,sBApEmCvB,aAAa,SAA9BI,QAAQ"},"metadata":{},"sourceType":"module"}