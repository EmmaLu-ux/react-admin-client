{"ast":null,"code":"import \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/menu/style\";\nimport _Menu from \"antd/es/menu\";\nvar _jsxFileName = \"/Users/emmalu/Documents/fronted/workspace/react-admin_client-1/src/components/left-nav/LeftNav.jsx\";\nimport React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport \"./LeftNav.less\";\nimport logo from \"../../assets/images/logo.jpeg\";\nimport menuList from \"../../config/menuConfig.js\";\n// import memoryUtils from \"../../utils/memoryUtils\";\nimport { setHeadTitle } from \"../../redux/actions\";\nconst {\n  SubMenu\n} = _Menu;\nclass LeftNav extends Component {\n  constructor() {\n    super(...arguments);\n    this.hasAuth = item => {\n      const {\n        key,\n        isPublic\n      } = item;\n      // const menus = memoryUtils.user.role.menus;\n      const menus = this.props.user.role.menus;\n      // const username = memoryUtils.user.username;\n      const username = this.props.user.username;\n      //1. 如果当前用户是admin\n      //3. 如果当前item是公开的\n      //2. 当前用户有此item的权限：key有没有在menus中\n      if (username === \"admin\" || isPublic || menus.indexOf(key) !== -1) {\n        return true;\n      } else if (item.children) {\n        //如果当前用户有此item的某个子item的权限\n        return !!item.children.find(child => menus.indexOf(child.key) !== -1);\n      }\n      return false;\n    };\n    this.getMenuNodes = menuList => {\n      //得到当前请求的路径\n      const path = this.props.location.pathname;\n      return menuList.reduce((pre, item) => {\n        //如果当前用户有item对应的权限，才需要显示对应的菜单项\n        if (this.hasAuth(item)) {\n          if (!item.children) {\n            // 如果只有一级路由\n            if (item.key === path || path.indexOf(item.key) === 0) {\n              //更新redux中headTitle的状态\n              this.props.setHeadTitle(item.title);\n            }\n            pre.push( /*#__PURE__*/React.createElement(_Menu.Item, {\n              key: item.key,\n              onClick: () => this.props.setHeadTitle(item.title),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 13\n              }\n            }, /*#__PURE__*/React.createElement(Link, {\n              to: item.key,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 15\n              }\n            }, /*#__PURE__*/React.createElement(_Icon, {\n              type: item.icon,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 17\n              }\n            }), /*#__PURE__*/React.createElement(\"span\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 17\n              }\n            }, item.title))));\n          } else {\n            // 如果有不止一级路由\n            //查找一个与当前请求路径相匹配的子item\n            const cItem = item.children.find(cItem => path.indexOf(cItem.key) === 0);\n            if (cItem) {\n              //如果存在，说明当前item的子列表需要打开\n              this.openKey = item.key;\n            }\n            pre.push( /*#__PURE__*/React.createElement(SubMenu, {\n              key: item.key,\n              title: /*#__PURE__*/React.createElement(\"span\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 17\n                }\n              }, /*#__PURE__*/React.createElement(_Icon, {\n                type: item.icon,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 19\n                }\n              }), /*#__PURE__*/React.createElement(\"span\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 19\n                }\n              }, item.title)),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 13\n              }\n            }, this.getMenuNodes(item.children)));\n          }\n        }\n        return pre;\n      }, []);\n    };\n  }\n  // 在第一次render()之前执行一次\n  // 为第一个render准备数据（同步）\n  componentWillMount() {\n    this.menuNodes = this.getMenuNodes(menuList);\n  }\n  render() {\n    //得到当前请求的路径，使得默认选中菜单项的某一个\n    let path = this.props.location.pathname;\n    if (path.indexOf(\"/product\") === 0) {\n      //说明当前请求的是商品或商品的子路由\n      path = \"/product\";\n    }\n\n    //得到需要打开菜单项的key\n    const openKey = this.openKey;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      to: \"/\",\n      className: \"left-nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      className: \"left-nav-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, \"XXX\\u540E\\u53F0\")), /*#__PURE__*/React.createElement(_Menu, {\n      selectedKeys: [path] /* 动态显示选中的菜单项，defaultSelectedKeys不能做到，它只能匹配第一次请求的路径，后面不会再改变 */,\n      defaultOpenKeys: [openKey],\n      mode: \"inline\",\n      theme: \"light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, this.menuNodes));\n  }\n}\nexport default connect(state => ({\n  user: state.user\n}), {\n  setHeadTitle\n})(withRouter(LeftNav));","map":{"version":3,"names":["React","Component","Link","withRouter","connect","logo","menuList","setHeadTitle","SubMenu","LeftNav","hasAuth","item","key","isPublic","menus","props","user","role","username","indexOf","children","find","child","getMenuNodes","path","location","pathname","reduce","pre","title","push","icon","cItem","openKey","componentWillMount","menuNodes","render","state"],"sources":["/Users/emmalu/Documents/fronted/workspace/react-admin_client-1/src/components/left-nav/LeftNav.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { Menu, Icon } from \"antd\";\nimport { connect } from \"react-redux\";\n\nimport \"./LeftNav.less\";\nimport logo from \"../../assets/images/logo.jpeg\";\nimport menuList from \"../../config/menuConfig.js\";\n// import memoryUtils from \"../../utils/memoryUtils\";\nimport { setHeadTitle } from \"../../redux/actions\";\n\nconst { SubMenu } = Menu;\n\nclass LeftNav extends Component {\n  /* 判断当前登录用户对item是否有访问权限 */\n  hasAuth = (item) => {\n    const { key, isPublic } = item;\n    // const menus = memoryUtils.user.role.menus;\n    const menus = this.props.user.role.menus;\n    // const username = memoryUtils.user.username;\n    const username = this.props.user.username;\n    //1. 如果当前用户是admin\n    //3. 如果当前item是公开的\n    //2. 当前用户有此item的权限：key有没有在menus中\n    if (username === \"admin\" || isPublic || menus.indexOf(key) !== -1) {\n      return true;\n    } else if (item.children) {\n      //如果当前用户有此item的某个子item的权限\n      return !!item.children.find((child) => menus.indexOf(child.key) !== -1);\n    }\n    return false;\n  };\n  /* 根据menu的数据数组生成对应的标签数组 */\n  getMenuNodes = (menuList) => {\n    //得到当前请求的路径\n    const path = this.props.location.pathname;\n    return menuList.reduce((pre, item) => {\n      //如果当前用户有item对应的权限，才需要显示对应的菜单项\n      if (this.hasAuth(item)) {\n        if (!item.children) { // 如果只有一级路由\n          if (item.key === path || path.indexOf(item.key) === 0) {\n            //更新redux中headTitle的状态\n            this.props.setHeadTitle(item.title);\n          }\n          pre.push((\n            <Menu.Item\n              key={item.key}\n              onClick={() => this.props.setHeadTitle(item.title)}\n            >\n              <Link to={item.key}>\n                <Icon type={item.icon} />\n                <span>{item.title}</span>\n              </Link>\n            </Menu.Item>\n          ));\n        } else { // 如果有不止一级路由\n          //查找一个与当前请求路径相匹配的子item\n          const cItem = item.children.find(\n            (cItem) => path.indexOf(cItem.key) === 0\n          );\n          if (cItem) {\n            //如果存在，说明当前item的子列表需要打开\n            this.openKey = item.key;\n          }\n          \n          pre.push((\n            <SubMenu\n              key={item.key}\n              title={\n                <span>\n                  <Icon type={item.icon} />\n                  <span>{item.title}</span>\n                </span>\n              }\n            >\n              {this.getMenuNodes(item.children)}\n            </SubMenu>\n          ));\n        }\n      }\n      return pre;\n    }, []);\n  };\n  // 在第一次render()之前执行一次\n  // 为第一个render准备数据（同步）\n  componentWillMount() {\n    this.menuNodes = this.getMenuNodes(menuList);\n  }\n  render() {\n    //得到当前请求的路径，使得默认选中菜单项的某一个\n    let path = this.props.location.pathname;\n    if (path.indexOf(\"/product\") === 0) {   //说明当前请求的是商品或商品的子路由\n      path = \"/product\";\n    }\n\n    //得到需要打开菜单项的key\n    const openKey = this.openKey;\n    return (\n      <div to=\"/\" className=\"left-nav\">\n        <Link to=\"/\" className=\"left-nav-header\">\n          <img src={logo} alt=\"logo\" />\n          <h1>XXX后台</h1>\n        </Link>\n        <Menu\n          selectedKeys={[path]} /* 动态显示选中的菜单项，defaultSelectedKeys不能做到，它只能匹配第一次请求的路径，后面不会再改变 */\n          defaultOpenKeys={[openKey]}\n          mode=\"inline\"\n          theme=\"light\"\n        >\n          {this.menuNodes}\n        </Menu>\n      </div>\n    );\n  }\n}\nexport default connect((state) => ({ user: state.user }), { setHeadTitle })(\n  withRouter(LeftNav)\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}