{"ast":null,"code":"/* 用来根据老的state和指定的action生成并返回新的state的函数 */\nimport storageUtils from '../utils/storageUtils';\nimport { combineReducers } from 'redux';\nimport { SET_HEAD_TITLE, RECEIVE_USER, SHOW_ERROR_MSG, RESET_USER } from './action-types';\n\n/* 用来管理头部标题的reducer函数 */\nconst initHeadTitle = '首页';\nfunction headTitle() {\n  let preState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initHeadTitle;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    data\n  } = action;\n  switch (type) {\n    case SET_HEAD_TITLE:\n      return data;\n    default:\n      return preState;\n  }\n}\n/* 用来管理当前登录用户的reducer函数 */\nconst initUser = storageUtils.getUser() || {};\nfunction user() {\n  let preState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initUser;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    user,\n    errorMsg\n  } = action;\n  switch (type) {\n    case RECEIVE_USER:\n      return user;\n    case SHOW_ERROR_MSG:\n      return {\n        ...preState,\n        errorMsg\n      };\n    case RESET_USER:\n      return {};\n    default:\n      return preState;\n  }\n}\n/* 默认向外暴露的是合并产生的reducer函数\n管理的总的state的结构：\n{\n    headTitle: '首页',\n    user: {}\n} */\nexport default combineReducers({\n  headTitle,\n  user\n});","map":{"version":3,"names":["storageUtils","combineReducers","SET_HEAD_TITLE","RECEIVE_USER","SHOW_ERROR_MSG","RESET_USER","initHeadTitle","headTitle","preState","action","type","data","initUser","getUser","user","errorMsg"],"sources":["/Users/emmalu/Documents/fronted/workspace/react-admin_client-1/src/redux/reducer.js"],"sourcesContent":["/* 用来根据老的state和指定的action生成并返回新的state的函数 */\nimport storageUtils from '../utils/storageUtils'\nimport {combineReducers} from 'redux'\n\nimport {SET_HEAD_TITLE, RECEIVE_USER, SHOW_ERROR_MSG, RESET_USER} from './action-types'\n\n/* 用来管理头部标题的reducer函数 */\nconst initHeadTitle = '首页'\nfunction headTitle(preState = initHeadTitle, action){\n    const {type, data} = action\n    switch (type) {\n        case SET_HEAD_TITLE:\n            return data\n        default: \n        return preState\n    }\n}\n/* 用来管理当前登录用户的reducer函数 */\nconst initUser = storageUtils.getUser() || {}\nfunction user(preState=initUser, action){\n    const {type, user, errorMsg} = action\n    switch (type) {\n        case RECEIVE_USER:\n            return user\n        case SHOW_ERROR_MSG:\n            return {...preState, errorMsg}\n        case RESET_USER:\n            return {}\n        default:\n            return preState\n    }\n}\n/* 默认向外暴露的是合并产生的reducer函数\n管理的总的state的结构：\n{\n    headTitle: '首页',\n    user: {}\n} */\nexport default combineReducers({\n    headTitle, user\n})\n"],"mappings":"AAAA;AACA,OAAOA,YAAY,MAAM,uBAAuB;AAChD,SAAQC,eAAe,QAAO,OAAO;AAErC,SAAQC,cAAc,EAAEC,YAAY,EAAEC,cAAc,EAAEC,UAAU,QAAO,gBAAgB;;AAEvF;AACA,MAAMC,aAAa,GAAG,IAAI;AAC1B,SAASC,SAAS,GAAkC;EAAA,IAAjCC,QAAQ,uEAAGF,aAAa;EAAA,IAAEG,MAAM;EAC/C,MAAM;IAACC,IAAI;IAAEC;EAAI,CAAC,GAAGF,MAAM;EAC3B,QAAQC,IAAI;IACR,KAAKR,cAAc;MACf,OAAOS,IAAI;IACf;MACA,OAAOH,QAAQ;EAAA;AAEvB;AACA;AACA,MAAMI,QAAQ,GAAGZ,YAAY,CAACa,OAAO,EAAE,IAAI,CAAC,CAAC;AAC7C,SAASC,IAAI,GAA2B;EAAA,IAA1BN,QAAQ,uEAACI,QAAQ;EAAA,IAAEH,MAAM;EACnC,MAAM;IAACC,IAAI;IAAEI,IAAI;IAAEC;EAAQ,CAAC,GAAGN,MAAM;EACrC,QAAQC,IAAI;IACR,KAAKP,YAAY;MACb,OAAOW,IAAI;IACf,KAAKV,cAAc;MACf,OAAO;QAAC,GAAGI,QAAQ;QAAEO;MAAQ,CAAC;IAClC,KAAKV,UAAU;MACX,OAAO,CAAC,CAAC;IACb;MACI,OAAOG,QAAQ;EAAA;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeP,eAAe,CAAC;EAC3BM,SAAS;EAAEO;AACf,CAAC,CAAC"},"metadata":{},"sourceType":"module"}